{"version":3,"file":"component---src-templates-index-tsx-2b4f225e9691ac6851ed.js","mappings":"4MASaA,GAAcC,EAAAA,EAAAA,eAA+B,MAEnD,SAASC,EACdC,EACAC,GACC,IAAD,EACA,iBAAOD,EAASC,UAAhB,QAAwB,SAGnB,IAQMC,EAAiB,WAE5B,OAVqB,WACrB,IAAMC,GAAOC,EAAAA,EAAAA,YAAWP,GACxB,IAAKM,EACH,MAAM,IAAIE,MAAM,0BAElB,OAAOF,EAIMG,GACDC,GCjBd,EAPc,WACZ,IAAMA,EAAIL,IACV,OACEM,EAAAA,cAAAA,KAAAA,KAAKD,EAAE,WCIX,EAPoB,WAClB,IAAMA,EAAIL,IACV,OACEM,EAAAA,cAAAA,IAAAA,KAAID,EAAE,iB,UCgBV,EAhBmB,SAAC,GAA0B,IAAxBE,EAAuB,EAAvBA,UACpB,OACED,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,KAAAA,KACGC,EAAUC,KAAI,SAACC,GAAD,OACbH,EAAAA,cAAAA,KAAAA,CAAIP,IAAKU,GACPH,EAAAA,cAACI,EAAAA,KAAD,CAAMC,GAAE,IAAMF,EAAN,KACLA,UCiCf,EAnB4C,SAAC,GAEtC,IADLG,EACI,EADJA,KAEML,EAAYK,EAAKC,mBAAmBC,MAAMN,KAAI,SAACO,GAAD,OAAUA,EAAKN,YAE7DR,EAAOK,EAAAA,SACX,kBAlBiB,SACnBM,EACAP,GAFmB,OAGhBW,EAAAA,EAAAA,MACHJ,MAAAA,OADO,EACPA,EAAMK,gBACNC,EAAAA,aACAA,EAAAA,MACEC,EAAAA,WACA,SAACP,GAAD,MAAW,CAAEd,SAAUc,EAAMP,EAAG,SAACN,GAAD,OAASM,EAAEO,EAAMb,SAU3CqB,CAAaR,EAAMf,KACzB,CAACe,IAGH,OACEN,EAAAA,cAACX,EAAY0B,SAAb,CAAsBC,MAAOrB,GAC3BK,EAAAA,cAACiB,EAAD,CAAYhB,UAAWA,IACvBD,EAAAA,cAACkB,EAAD,MACAlB,EAAAA,cAACmB,EAAD","sources":["webpack://gatsby-l10n-example/./src/context/L10nContext.ts","webpack://gatsby-l10n-example/./src/components/Title.tsx","webpack://gatsby-l10n-example/./src/components/Description.tsx","webpack://gatsby-l10n-example/./src/components/Navigation.tsx","webpack://gatsby-l10n-example/./src/templates/index.tsx"],"sourcesContent":["import { createContext, useContext } from 'react';\nimport { graphql } from 'gatsby';\n\ntype Nullable<T> = T | null;\nexport type L10NContextType = Nullable<{\n  messages: GatsbyTypes.TranslationDatas_allDatasFragment,\n  t: (key: keyof GatsbyTypes.TranslationDatas_allDatasFragment) => string,\n}>;\n\nexport const L10nContext = createContext<L10NContextType>(null);\n\nexport function getTranslationText(\n  messages: GatsbyTypes.TranslationDatas_allDatasFragment,\n  key: keyof GatsbyTypes.TranslationDatas_allDatasFragment,\n) {\n  return messages[key] ?? '⚠️⚠️⚠️';\n}\n\nexport const useL10N = () => {\n  const l10n = useContext(L10nContext);\n  if (!l10n) {\n    throw new Error('번역 데이터 리소스가 존재하지 않습니다.');\n  }\n  return l10n;\n};\n\nexport const useTranslation = () => {\n  const l10n = useL10N();\n  return l10n.t;\n};\n\nexport const fragments = graphql`\n  fragment TranslationDatas on Query {\n    translationData(language: { eq: $language }) {\n      ...TranslationDatas_allDatas\n    }\n  }\n`;\n","import * as React from 'react';\n\nimport { useTranslation } from '~/src/context/L10nContext';\n\nconst Title = () => {\n  const t = useTranslation();\n  return (\n    <h1>{t('title')}</h1>\n  );\n};\n\nexport default Title;\n","import * as React from 'react';\n\nimport { useTranslation } from '~/src/context/L10nContext';\n\nconst Description = () => {\n  const t = useTranslation();\n  return (\n    <p>{t('description')}</p>\n  );\n};\n\nexport default Description;\n","import * as React from 'react';\nimport { graphql, Link } from 'gatsby';\n\ntype Props = {\n  languages: string[],\n};\n\nconst Navigation = ({ languages }: Props) => {\n  return (\n    <nav>\n      <ul>\n        {languages.map((language) => (\n          <li key={language}>\n            <Link to={`/${language}/`}>\n              {language}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;\n\nexport const fragments = graphql`\n  fragment NavigationFragment on TranslationDataConnection {\n    nodes {\n      language\n    }\n  }\n`;\n","import * as React from 'react';\nimport * as O from 'fp-ts/lib/Option';\nimport { graphql } from 'gatsby';\nimport { pipe, constNull } from 'fp-ts/lib/function';\n\nimport { getTranslationText, L10nContext } from '~/src/context/L10nContext';\nimport Title from '~/src/components/Title';\nimport Description from '~/src/components/Description';\nimport Navigation from '~/src/components/Navigation';\nimport type { L10NContextType } from '~/src/context/L10nContext';\n\nimport type { PageProps } from 'gatsby';\n\ntype PageContext = { language: string };\ntype Props = PageProps<GatsbyTypes.LocalizedIndexPageQuery, PageContext, unknown>;\n\nconst getL10nValue = (\n  data: GatsbyTypes.LocalizedIndexPageQuery,\n  t: typeof getTranslationText,\n) => pipe(\n  data?.translationData,\n  O.fromNullable,\n  O.match(\n    constNull,\n    (data) => ({ messages: data, t: (key) => t(data, key) }) as L10NContextType,\n  ),\n);\n\nconst LocalizedIndexPage: React.FC<Props> = ({\n  data,\n}) => {\n  const languages = data.allTranslationData.nodes.map((node) => node.language);\n\n  const l10n = React.useMemo<L10NContextType>(\n    () => getL10nValue(data, getTranslationText),\n    [data],\n  );\n\n  return (\n    <L10nContext.Provider value={l10n}>\n      <Navigation languages={languages} />\n      <Title />\n      <Description />\n    </L10nContext.Provider>\n  );\n};\n\nexport default LocalizedIndexPage;\n\nexport const query = graphql`\n  query LocalizedIndexPage($language: String!) {\n    ...TranslationDatas\n    allTranslationData {\n      ...NavigationFragment\n    }\n  }\n`;\n"],"names":["L10nContext","createContext","getTranslationText","messages","key","useTranslation","l10n","useContext","Error","useL10N","t","React","languages","map","language","Link","to","data","allTranslationData","nodes","node","pipe","translationData","O","constNull","getL10nValue","Provider","value","Navigation","Title","Description"],"sourceRoot":""}